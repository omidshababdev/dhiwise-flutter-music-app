import 'package:equatable/equatable.dart';import 'package:flutter/material.dart';import '/core/app_export.dart';import '../models/playback_item_model.dart';import 'package:dhiwise_flutter_music_app/presentation/playback_screen/models/playback_model.dart';part 'playback_event.dart';part 'playback_state.dart';/// A bloc that manages the state of a Playback according to the event that is dispatched to it.
class PlaybackBloc extends Bloc<PlaybackEvent, PlaybackState> {PlaybackBloc(PlaybackState initialState) : super(initialState) { on<PlaybackInitialEvent>(_onInitialize); on<PlaybackItemEvent>(_playbackItem); }

_onInitialize(PlaybackInitialEvent event, Emitter<PlaybackState> emit, ) async  { emit(state.copyWith(playbackModelObj: state.playbackModelObj?.copyWith(playbackItemList: fillPlaybackItemList()))); } 
_playbackItem(PlaybackItemEvent event, Emitter<PlaybackState> emit, ) { List<PlaybackItemModel> newList = List<PlaybackItemModel>.from(state.playbackModelObj!.playbackItemList); newList[event.index] = newList[event.index].copyWith(isSelectedSwitch: event.isSelectedSwitch); emit(state.copyWith(playbackModelObj: state.playbackModelObj?.copyWith(playbackItemList: newList))); } 
List<PlaybackItemModel> fillPlaybackItemList() { return [PlaybackItemModel(automix: "Automix", allowsSeamless: "Allows seamless transitions between songs on select playlists."), PlaybackItemModel(automix: "Gapless", allowsSeamless: "Allows gapless playback."), PlaybackItemModel(automix: "Allow Explicit Content", allowsSeamless: "Turn on play explicit content."), PlaybackItemModel(automix: "Show Unplayable Songs", allowsSeamless: "Show song that are unplayable."), PlaybackItemModel(automix: "Normalize Volume", allowsSeamless: "Set the same volume level for all tracks."), PlaybackItemModel(automix: "Mono Audio", allowsSeamless: "Makes tke left and right speakers play the same audio."), PlaybackItemModel(automix: "Device Broadcast Status", allowsSeamless: "Allow other apps on your device to see what you are listening to.")]; } 
 }
